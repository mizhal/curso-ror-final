* Proyecto Alojamientos
** Requisitos
*** 
** Modulos
*** Usuarios
- Datos de usuario
  creacion, modificacion...
- Permisos = Grupos
  Grupo Admin, Grupo Propietario, Grupo Visitante
- Autentificacion y autorizacion
  Luego las primitivas de autorizacion se usan desde los otros módulos
  Recuperacion de clave
  Formulario de contacto
*** Alojamientos
** Controladores
*** application
**** authorize_admin
**** authorize_landlord
**** admin? (helper method)
**** landlord? (helper method)
*** sessions
**** new
**** delete
*** users
Administracion de usuarios
**** index_admins
Vista de administradores para administrar a los administradores :D, ver [[#Q03]]
**** index_landlords
Vista de propietarios para administrar propietarios, ver [[#Q03]]
**** new/create 
Para registrarse como propietario, es público
**** edit/update
Los datos son editables por el propio usuario
**** show
El detalle propio es visible por el propio usuario
**** delete
**** authorize_owner
Para que solo el usuario pueda tratar con sus propios datos, salvo admin
*** accommodations
**** index
Se puede usar como portada o quizás convenga más crear un controlador específico
**** new
el formulario tendría atributos anidados para definir las habitaciones sobre la marcha
**** create
**** edit
el formulario tendría atributos anidados para definir las habitaciones sobre la marcha
**** update
**** show
**** authorize_owner
Para permitir la edición solo al propietario
*** roomtypes
**** index
**** new/create
Estarían capados, se hace desde el formulario de accommodations
**** edit/update
En este caso se permitiría editar individualmente las habitaciones
**** authorize_owner
Para autorizar solo al propietario del alojamiento (salvo admin)
*** categories
**** index 
**** new/create
**** edit/update
**** delete
*** offers
**** index
**** new/create
**** edit/update
**** delete
**** authorize_owner
Para controlar acceso del propietario del alojamiento 
** Notas
*** Estilos
Lo más semejante a las muestras.
** Clases
*** Usuario/User
name:string
surname:string
email:string
password:string

has_many :accommodations
belongs_to :role

**** metodos
***** initialize
en el constructor asignar el Rol por defecto de "propietario"

**** scopes
***** admins
retorna los usuarios administradores
***** landlords
retorna los usuarios propietarios

*** Rol/Role
name:string

has_many :users

*** Alojamiento/Accommodation
name:string
brief_description:text 
  es una breve descripcion, tipo lema o slogan. Se puede ver un ejemplo en la   muestra "detalle-alojamiento.png" donde pone 'Un hotel comprometido con la naturaleza\nInstalaciones de placas solares...'
description:text

# MAPS: estos dos campos los añade la migracion de la gema de mapas
latitude:float
longitude:float

#ADDRESS
city:string
address:string
postal_code:int

belongs_to :province

# DESTACADOS
featured:boolean
  marca binaria de alojamiento destacado

#RELACIONES

has_many :photos
has_many :offers
has_many :room_types
belongs_to :category
belongs_to :landlord, :class_name => User, :foreign_key => :landlord_id

*** TipoHabitacion/RoomType
  No se trata de habitaciones individuales como sería necesario para gestión de reservas. En lugar de eso, son las tipologías que ofrece el alojamiento, independientemente de que luego hubiera varias unidades del mismo tipo de habitación

name:string
brief_description:text
description:text

has_many :photos, :as => :image_owner
  Relacion polimorfica, ver http://guides.rubyonrails.org/association_basics.html#polymorphic-associations

belongs_to :accommodation

*** Categoria/Category
name:string
description:text
gmaps_icon:text 
  imagen adjunta para poner un icono al marcador de google maps

has_many :children, 
  :class_name => "Category", 
  :foreign_key => :parent_id
belongs_to :parent,
  :class_name => "Category",
  :foreign_key => :parent_id

*** Oferta/Offer
name:string
summary:text
description:text
price:float

belongs_to :accommodation

*** Foto/Photo
## created_at y modified_at
description: text

belongs_to :image_owner, :polymorphic => true
  Relacion polimorfica, ver http://guides.rubyonrails.org/association_basics.html#polymorphic-associations

*** Comentario/Comment
Proporcionado por la gema acts_as_commentable

*** Province
name:string

belongs_to :country
*** Country
name:string

has_many :provinces
** TODO Pasos
*** DONE establecer control versiones
*** DONE importación de estilos de bootstrap
   rails generate bootstrap:install static
    rails g bootstrap:layout application fixed
*** DONE adaptacion del layout de aplicación
**** DONE eliminar las barras sobrantes
**** DONE eliminar iconos de apple
que cascan en producción, en concreto el "images/apple-touch-icon-144x144-precomposed.png"
*** DONE establecimiento de sesiones en BD
rake db:sessions:create
*** DONE creación del modelo
**** DONE crear scaffolds y models
***** DONE Role
rails g scaffold Role name:string
***** DONE User
rails g scaffold User name:string surname:string email:string password:string role_id:integer 
***** DONE Country
rails g model Country name:string
***** DONE Province
rails g model Province name:string country_id:integer
***** DONE Category
rails g scaffold Category name:string parent_id:integer
***** DONE Accommodation
rails g scaffold Accommodation name:string brief_description:text description:text province_id:integer city:string address:string postal_code:integer featured:boolean published:boolean category_id:integer landlord_id:integer
***** DONE RoomType
rails g scaffold RoomType name:string brief_description:text description:text
***** DONE Offer
rails g scaffold Offer name:string  summary:text description:text price:float accommodation_id:integer
***** DONE Photo
rails g model Photo name:string description:string image_owner_id:integer image_owner_type:string
**** DONE establecer relaciones
**** DONE prueba de relaciones (poco minuciosa)
En este caso se hizo sin tests unitarios 
***** DONE crear y cargar fixtures
para detectar relaciones que falten o errores

**** DONE crear indices en relaciones
**** DONE validaciones (escritas, no probadas estrictamente, puede volver a entrar)
**** DONE pruebas unitarias
*** DONE aplicar estilos de bootstrap a los scaffolds
Solo los modelos que tienen vistas

rails g bootstrap:themed Accommodations
rails g bootstrap:themed Users
rails g bootstrap:themed RoomTypes
rails g bootstrap:themed Categories
rails g bootstrap:themed Offers

*** DONE integrar bcrypt y password encriptado en base de datos
*** DONE añadir indice a email
porque se busca mucho por ese campo (análogo al login)
*** DONE controlador de sesiones
rails g controller sessions new destroy
*** DONE añadir slugs
a:
 User
 Accommodation
 RoomType
 Offer
 Category
*** TODO ajuste de vistas
Crear combos, etc
**** DONE partial de errores de validación
**** DONE ajuste de Category
**** TODO crear helpers de permisos para poder mostrar u ocultar en funcion de ellos
Intentar usar la gema CanCan con lo que tengo hasta ahora
***** TODO Integrar gema CanCan
****** TODO crear clase Ability
ial de errores de validación
**** DONE ajuste de Category
**** TODO crear helpers de permisos para poder mostrar u ocultar en funcion de ellos
Intentar usar la gema CanCan con lo que tengo hasta ahora
***** TODO Integrar gema CanCan
****** TODO crear clase Ability
rails g cancan:ability
****** TODO definir habilidades
Implementando la clase Ability
****** TODO probar las restricciones en el acceso
Cargar autorizaciones en los controladores y probar el acceso.
**** TODO paginacion de vistas
Excepto categorías que es árbol
**** TODO formulario de creacion de alojamientos
***** TODO combos,etc
***** TODO habitaciones anidadas
Con habitaciones anidadas
*** TODO crear controladores adicionales
...el de la vista pública si es que es necesario...
*** TODO retocar las vistas
Poner combos, enlaces y eso
**** TODO integrar el partial de errores de validacion en formularios
** TODO Cuestiones
*** DONE Repensar si es justificable usar grupos
:CUSTOM_ID: Q00
Realmente para el problema parece 'overkill' usar grupos y permisos.
Hay problemas: si un propietario es "degradado" a visitante hay que controlar que no tenga alojamientos vinculados para mantener la consistencia. Se puede hacer con callbacks si se sigue con el diseño usuarios-grupos en lugar de con un modelo específico de propietario

**** SOLUCION
Usar un modelo de roles. Existe una tabla de roles que tiene como unico campo el nombre del rol (y quizás una descripción). Cada usuario tiene un rol.
Los roles del sistema son administrador y propietario. Estos dos roles se crearán en la tabla directamente mediante una migración.

*** TODO Usar una gestión de provincias y ciudades
:CUSTOM_ID: Q01
No me parece justificable usar modelos individuales para ellas, ya que requiere un mantenimiento excesivo para poca utilidad. Por otro lado, los alojamientos rurales se situan en poblamientos con nombres populares y muchas veces barrios. No es razonable que estas poblaciones estén registradas y tabuladas en base de datos.
Así, para provincias se usaría un cierto tipo de constante de modelo y para ciudad sería un texto libre, asumiendo los riesgos de que aparezcan ciudades que no existan.
**** SOLUCION
Usar unas tablas de:
  pais
  provincia

que cargaremos con datos iniciales de españa y sus provincias. Por si fuera necesario ampliar a otros paises.
A nivel de ciudad, como se comenta antes es excesivo por la gran cantidad de poblaciones 

*** TODO mirar gema CanCan
:CUSTOM_ID: Q02
Para gestión de autorizacion, permisos y grupos

*** TODO repensar en el controlador de users los dos index
:CUSTOM_ID: Q03
De momento he puesto dos index, uno para admins y otro para propietarios, pero quizas sería mejor un index 
*** TODO plantear: cambiar brief_description por summary en todos
*** TODO no se paginan arboles de momento
Mirar si hay alguna solucion no extremadamente complicada. Mientras, la vista de categorias queda sin paginar
