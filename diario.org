* Proyecto Alojamientos
** Requisitos
*** 
** Modulos
*** Usuarios
- Datos de usuario
  creacion, modificacion...
- Permisos = Grupos
  Grupo Admin, Grupo Propietario, Grupo Visitante
- Autentificacion y autorizacion
  Luego las primitivas de autorizacion se usan desde los otros módulos
  Recuperacion de clave
  Formulario de contacto
*** Alojamientos
** Controladores
*** application
**** authorize_admin
**** authorize_landlord
**** admin? (helper method)
**** landlord? (helper method)
*** sessions
**** new
**** delete
*** users
Administracion de usuarios
**** index_admins
Vista de administradores para administrar a los administradores :D, ver [[#Q03]]
**** index_landlords
Vista de propietarios para administrar propietarios, ver [[#Q03]]
**** new/create 
Para registrarse como propietario, es público
**** edit/update
Los datos son editables por el propio usuario
**** show
El detalle propio es visible por el propio usuario
**** delete
**** authorize_owner
Para que solo el usuario pueda tratar con sus propios datos, salvo admin
*** accommodations
**** index
Se puede usar como portada o quizás convenga más crear un controlador específico
**** new
el formulario tendría atributos anidados para definir las habitaciones sobre la marcha
**** create
**** edit
el formulario tendría atributos anidados para definir las habitaciones sobre la marcha
**** update
**** show
**** authorize_owner
Para permitir la edición solo al propietario
*** roomtypes
**** index
**** new/create
Estarían capados, se hace desde el formulario de accommodations
**** edit/update
En este caso se permitiría editar individualmente las habitaciones
**** authorize_owner
Para autorizar solo al propietario del alojamiento (salvo admin)
*** categories
**** index 
**** new/create
**** edit/update
**** delete
*** offers
**** index
**** new/create
**** edit/update
**** delete
**** authorize_owner
Para controlar acceso del propietario del alojamiento 
** Notas
*** Estilos
Lo más semejante a las muestras.
** Clases
*** Usuario/User
name:string
surname:string
email:string
password:string

has_many :accommodations
belongs_to :role

**** metodos
***** initialize
en el constructor asignar el Rol por defecto de "propietario"

**** scopes
***** admins
retorna los usuarios administradores
***** landlords
retorna los usuarios propietarios

*** Rol/Role
name:string

has_many :users

*** Alojamiento/Accommodation
name:string
brief_description:text 
  es una breve descripcion, tipo lema o slogan. Se puede ver un ejemplo en la   muestra "detalle-alojamiento.png" donde pone 'Un hotel comprometido con la naturaleza\nInstalaciones de placas solares...'
description:text

# MAPS: estos dos campos los añade la migracion de la gema de mapas
latitude:float
longitude:float

#ADDRESS/CONTACT
city:string
address:string
postal_code:int
web:string
phone:string
email:string

belongs_to :province

# ESTADO DE PUBLICACION
published:boolean

# DESTACADOS
featured:boolean
  marca binaria de alojamiento destacado

#RELACIONES

has_many :photos
has_many :offers
has_many :room_types
belongs_to :category
belongs_to :landlord, :class_name => User, :foreign_key => :landlord_id

*** TipoHabitacion/RoomType
  No se trata de habitaciones individuales como sería necesario para gestión de reservas. En lugar de eso, son las tipologías que ofrece el alojamiento, independientemente de que luego hubiera varias unidades del mismo tipo de habitación

name:string
brief_description:text
description:text

has_many :photos, :as => :image_owner
  Relacion polimorfica, ver http://guides.rubyonrails.org/association_basics.html#polymorphic-associations

belongs_to :accommodation

*** Categoria/Category
name:string
description:text
gmaps_icon:text 
  imagen adjunta para poner un icono al marcador de google maps

has_many :children, 
  :class_name => "Category", 
  :foreign_key => :parent_id
belongs_to :parent,
  :class_name => "Category",
  :foreign_key => :parent_id

*** Oferta/Offer
name:string
summary:text
description:text
price:float

belongs_to :accommodation

*** Foto/Photo
## created_at y modified_at
name:string
description:text

belongs_to :image_owner, :polymorphic => true
  Relacion polimorfica, ver http://guides.rubyonrails.org/association_basics.html#polymorphic-associations

*** Comentario/Comment
Proporcionado por la gema acts_as_commentable

*** Province
name:string

belongs_to :country
*** Country
name:string

has_many :provinces
*** ContactRequest
Almacena los campos del formulario de contacto para manejo más sencillo y validación

name:string
company:string
email:string
phone:string
comments:text
privacy_policy:boolean

** TODO Pasos
*** DONE establecer control versiones
*** DONE importación de estilos de bootstrap
   rails generate bootstrap:install static
    rails g bootstrap:layout application fixed
*** DONE adaptacion del layout de aplicación
**** DONE eliminar las barras sobrantes
**** DONE eliminar iconos de apple
que cascan en producción, en concreto el "images/apple-touch-icon-144x144-precomposed.png"
*** DONE establecimiento de sesiones en BD
rake db:sessions:create
*** DONE creación del modelo
**** DONE crear scaffolds y models
***** DONE Role
rails g scaffold Role name:string
***** DONE User
rails g scaffold User name:string surname:string email:string password:string role_id:integer 
***** DONE Country
rails g model Country name:string
***** DONE Province
rails g model Province name:string country_id:integer
***** DONE Category
rails g scaffold Category name:string parent_id:integer
***** DONE Accommodation
rails g scaffold Accommodation name:string brief_description:text description:text province_id:integer city:string address:string postal_code:integer featured:boolean published:boolean category_id:integer landlord_id:integer
***** DONE RoomType
rails g scaffold RoomType name:string brief_description:text description:text
***** DONE Offer
rails g scaffold Offer name:string  summary:text description:text price:float accommodation_id:integer
***** DONE Photo
rails g scaffold Photo name:string description:string image_owner_id:integer image_owner_type:string
**** DONE establecer relaciones
**** DONE prueba de relaciones (poco minuciosa)
En este caso se hizo sin tests unitarios 
***** DONE crear y cargar fixtures
para detectar relaciones que falten o errores

**** DONE crear indices en relaciones
**** DONE validaciones (escritas, no probadas estrictamente, puede volver a entrar)
**** DONE pruebas unitarias
*** DONE aplicar estilos de bootstrap a los scaffolds
Solo los modelos que tienen vistas

rails g bootstrap:themed Accommodations
rails g bootstrap:themed Users
rails g bootstrap:themed RoomTypes
rails g bootstrap:themed Categories
rails g bootstrap:themed Offers

*** DONE integrar bcrypt y password encriptado en base de datos
*** DONE añadir indice a email de User
porque se busca mucho por ese campo (análogo al login)
*** DONE controlador de sesiones
rails g controller sessions new destroy
*** DONE añadir slugs
a:
 User
 Accommodation
 RoomType
 Offer
 Category
*** DONE partial de errores de validación
*** DONE funcionalidad completa de Category
Categorías anidadas etc
*** DONE crear helpers de permisos para poder mostrar u ocultar en funcion de ellos
Intentar usar la gema CanCan con lo que tengo hasta ahora
***** DONE Integrar gema CanCan
****** DONE crear clase Ability
rails g cancan:ability
****** DONE definir habilidades
Implementando la clase Ability
****** DONE probar las restricciones en el acceso
Cargar autorizaciones en los controladores y probar el acceso.
He probado el acceso "público" a editar Accommodation y veta adecuadamente la entrada.
******* DONE probar restricciones de acceso en habitaciones anidadadas
Se autoriza solo con el objeto padre
****** DONE probar a ocultar mediante "can?"
funciona bien
*** DONE barra de navegación del layout de administración
*** DONE formulario de creacion de alojamientos
**** DONE poner combos y otras entradas correctamente
**** DONE agrupar los campos en fieldsets
**** DONE hacer los fieldsets desplegables
Cuando haga click ocultar los campos del fieldset para no tener que escrolear abajo tanto.

**** DONE habitaciones anidadas (solo funcionalidad)
Con habitaciones anidadas
**** DONE subir fotos
***** DONE decidir donde poner el subformulario de subida de fotos
Se puede poner un formulario ESTATICO anidado en el formulario de Accommodation.
Otro con AJAX en la vista show de Accommodation, para añadir fotos desde ahí (en el ejemplo anterior no hay ajax que valga porque si el formulario viene de la acción "new", todavía no hay un ID de accommodation para vincular con el la foto hasta que se haga submit)
Luego otro en la vista de detalle de la habitación.
***** DONE añadir gema paperclip
***** DONE rehacer scaffold de photo
Copiar el contenido del modelo y rehacerlo todo y luego volver a copiar al nuevo modelo
***** DONE crear migraciones y attachment de paperclip en modelo de photo
***** DONE colocar subformulario estático en Accommodation#_form
*** DONE gestion de ofertas
**** DONE acciones anidadas
 index, new, create, edit, update, destroy
**** DONE accion publica
Listado general paginado y filtrado por el buscador de ofertas.
*** DONE mapas
**** DONE instalar gema
rails generate gmaps4rails:install
**** DONE preparar modelos
Escribir acts_as_gmappable en Accommodation
**** DONE migracion para añadir campos de mapas
**** DONE mapa global
**** DONE cambiar icono de los markers
***** DONE añadir icono a la categoría
**** DONE infobox
**** DONE respetar latitud y longitud si se introducen a mano
En el modelo
**** DONE permitir seleccionar moviendo el marker
Y mantener las coherencias entre campos y mapa:
***** DONE si se cambian lat y lon, mover el marker
***** DONE si se mueve el marker, cambiar lat y lon
***** DONE si se cambia el address, mover el marker
*** TODO [4/5] pagina de contacto
**** DONE controlador con operaciones REST

      rails g scaffold_controller contact_requests 

**** DONE crear un modelo a mano en contact_request.rb 
incluir modulos con funcionalidad de validación y de asignación masiva. Esto último creando directamente el constructor
**** DONE controlador de contacto
**** DONE Envía correo a los administradores (en la operación create)
**** TODO estilos
Adaptar el formulario a los estilos dados en las muestras
*** TODO [1/2] fotos en ofertas
**** DONE crear relacion y aceptar nested attributes
**** TODO adaptar el formulario de oferta para aceptar imagenes
Extraer el partial de imagenes a otra carpeta de vistas diferente de accommodations
*** TODO permisos de las fotos
En el momento, las fotos no están anidadas con los alojamientos y por ello no se puede validar los permisos de esa manera.
Ver lo que conviene. 
En principio, anidar las fotos con el alojamiento (independientemente de si sean de la habitacion, de una oferta o del propio alojamiento)
*** TODO revisar dependent => destroys
Todos los objetos que tienen composición fuerte deben tener esta cláusula.
*** TODO paginacion de vistas
Excepto categorías que es árbol
*** TODO crear categorías y subcategorías mediante nested forms
*** TODO *opcional* subformulario AJAX para fotos
**** TODO colocar subformulario AJAX en Accommodation#show
**** TODO colocar subformulario AJAX en RoomType#show
*** TODO indices en campos de búsqueda
Analizar si queda alguno
*** TODO buscador de alojamientos
Por nombre, provincia (desplegable de provincias), tipología (desplegable de tipologias)
*** TODO navegador de tipologías
Elemento de la barra lateral que muestra las categorías "toplevel" y al hacer click filtra la vista de indice de alojamientos
*** TODO buscador de ofertas
*** TODO layout público
Barras laterales, content_for, pie de página...

*** TODO poner todas las inputs como block-level
Poner la clase/mixin de bootstrap 'input-block-level' a todas las inputs para mejor aspecto
*** TODO crear controladores adicionales
...el de la vista pública si es que es necesario...
*** TODO reformar vistas
De tabla al formato especifico
*** TODO *opcional* lightbox para imágenes
Incorporar esta librería de JS:
   Ligthbox2
       web: http://lokeshdhakar.com/projects/lightbox2/
*** TODO *opcional* carrusel
Ver [[http://www.w3resource.com/twitter-bootstrap/carousel-tutorial.php][Tutorial W3C del Carrusel de Bootstrap]]

*** TODO *opcional* subir varias fotos de un golpe en un archivo ZIP
Además de los formularios para subir las fotos una a una (empotrados en el form de Accommodation y RoomType o los de ajax que hubiera), se debe crear un campo/subformulario de subida de archivo que admita un ZIP con varias imágenes (ignorar archivos que no sean de imagen).

Una vez subido, debe descomprimirse (en un directorio temporal conocido) y para cada archivo de imagen en el zip crear un objeto Photo, con la propiedad image asignada al archivo presente en el temporal (cargado con el objeto de Ruby File). Al asignar la propiedad Photo.image, paperclip ya se encargará de generar los cortes.

Esta acción se realizará en el controlador de "Photo", en una nueva acción para subida masiva.
Allí hay que ocuparse también de borrar los archivos que sean innecesarios después de crear los objetos Photo. Esto hay que verlo sobre la marcha, pero seguro es que el archivo ZIP debe borrarse.

** TODO Cuestiones
*** DONE Repensar si es justificable usar grupos
:CUSTOM_ID: Q00
Realmente para el problema parece 'overkill' usar grupos y permisos.
Hay problemas: si un propietario es "degradado" a visitante hay que controlar que no tenga alojamientos vinculados para mantener la consistencia. Se puede hacer con callbacks si se sigue con el diseño usuarios-grupos en lugar de con un modelo específico de propietario

**** SOLUCION
Usar un modelo de roles. Existe una tabla de roles que tiene como unico campo el nombre del rol (y quizás una descripción). Cada usuario tiene un rol.
Los roles del sistema son administrador y propietario. Estos dos roles se crearán en la tabla directamente mediante una migración.

*** TODO Usar una gestión de provincias y ciudades
:CUSTOM_ID: Q01
No me parece justificable usar modelos individuales para ellas, ya que requiere un mantenimiento excesivo para poca utilidad. Por otro lado, los alojamientos rurales se situan en poblamientos con nombres populares y muchas veces barrios. No es razonable que estas poblaciones estén registradas y tabuladas en base de datos.
Así, para provincias se usaría un cierto tipo de constante de modelo y para ciudad sería un texto libre, asumiendo los riesgos de que aparezcan ciudades que no existan.
**** SOLUCION
Usar unas tablas de:
  pais
  provincia

que cargaremos con datos iniciales de españa y sus provincias. Por si fuera necesario ampliar a otros paises.
A nivel de ciudad, como se comenta antes es excesivo por la gran cantidad de poblaciones 

*** TODO mirar gema CanCan
:CUSTOM_ID: Q02
Para gestión de autorizacion, permisos y grupos

*** TODO repensar en el controlador de users los dos index
:CUSTOM_ID: Q03
De momento he puesto dos index, uno para admins y otro para propietarios, pero quizas sería mejor un index 
*** TODO plantear: cambiar brief_description por summary en todos
*** TODO no se paginan arboles de momento
Mirar si hay alguna solucion no extremadamente complicada. Mientras, la vista de categorias queda sin paginar
